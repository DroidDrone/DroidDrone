/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SIM_STATE PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Status of simulation environment, if used
 */
public class msg_sim_state extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SIM_STATE = 108;
    public static final int MAVLINK_MSG_LENGTH = 92;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SIM_STATE;

    
    /**
     * True attitude quaternion component 1, w (1 in null-rotation)
     */
    @Description("True attitude quaternion component 1, w (1 in null-rotation)")
    @Units("")
    public float q1;
    
    /**
     * True attitude quaternion component 2, x (0 in null-rotation)
     */
    @Description("True attitude quaternion component 2, x (0 in null-rotation)")
    @Units("")
    public float q2;
    
    /**
     * True attitude quaternion component 3, y (0 in null-rotation)
     */
    @Description("True attitude quaternion component 3, y (0 in null-rotation)")
    @Units("")
    public float q3;
    
    /**
     * True attitude quaternion component 4, z (0 in null-rotation)
     */
    @Description("True attitude quaternion component 4, z (0 in null-rotation)")
    @Units("")
    public float q4;
    
    /**
     * Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
     */
    @Description("Attitude roll expressed as Euler angles, not recommended except for human-readable outputs")
    @Units("rad")
    public float roll;
    
    /**
     * Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
     */
    @Description("Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs")
    @Units("rad")
    public float pitch;
    
    /**
     * Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
     */
    @Description("Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs")
    @Units("rad")
    public float yaw;
    
    /**
     * X acceleration
     */
    @Description("X acceleration")
    @Units("m/s/s")
    public float xacc;
    
    /**
     * Y acceleration
     */
    @Description("Y acceleration")
    @Units("m/s/s")
    public float yacc;
    
    /**
     * Z acceleration
     */
    @Description("Z acceleration")
    @Units("m/s/s")
    public float zacc;
    
    /**
     * Angular speed around X axis
     */
    @Description("Angular speed around X axis")
    @Units("rad/s")
    public float xgyro;
    
    /**
     * Angular speed around Y axis
     */
    @Description("Angular speed around Y axis")
    @Units("rad/s")
    public float ygyro;
    
    /**
     * Angular speed around Z axis
     */
    @Description("Angular speed around Z axis")
    @Units("rad/s")
    public float zgyro;
    
    /**
     * Latitude (lower precision). Both this and the lat_int field should be set.
     */
    @Description("Latitude (lower precision). Both this and the lat_int field should be set.")
    @Units("deg")
    public float lat;
    
    /**
     * Longitude (lower precision). Both this and the lon_int field should be set.
     */
    @Description("Longitude (lower precision). Both this and the lon_int field should be set.")
    @Units("deg")
    public float lon;
    
    /**
     * Altitude
     */
    @Description("Altitude")
    @Units("m")
    public float alt;
    
    /**
     * Horizontal position standard deviation
     */
    @Description("Horizontal position standard deviation")
    @Units("")
    public float std_dev_horz;
    
    /**
     * Vertical position standard deviation
     */
    @Description("Vertical position standard deviation")
    @Units("")
    public float std_dev_vert;
    
    /**
     * True velocity in north direction in earth-fixed NED frame
     */
    @Description("True velocity in north direction in earth-fixed NED frame")
    @Units("m/s")
    public float vn;
    
    /**
     * True velocity in east direction in earth-fixed NED frame
     */
    @Description("True velocity in east direction in earth-fixed NED frame")
    @Units("m/s")
    public float ve;
    
    /**
     * True velocity in down direction in earth-fixed NED frame
     */
    @Description("True velocity in down direction in earth-fixed NED frame")
    @Units("m/s")
    public float vd;
    
    /**
     * Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred).
     */
    @Description("Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred).")
    @Units("degE7")
    public int lat_int;
    
    /**
     * Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred).
     */
    @Description("Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred).")
    @Units("degE7")
    public int lon_int;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_SIM_STATE;

        packet.payload.putFloat(q1);
        packet.payload.putFloat(q2);
        packet.payload.putFloat(q3);
        packet.payload.putFloat(q4);
        packet.payload.putFloat(roll);
        packet.payload.putFloat(pitch);
        packet.payload.putFloat(yaw);
        packet.payload.putFloat(xacc);
        packet.payload.putFloat(yacc);
        packet.payload.putFloat(zacc);
        packet.payload.putFloat(xgyro);
        packet.payload.putFloat(ygyro);
        packet.payload.putFloat(zgyro);
        packet.payload.putFloat(lat);
        packet.payload.putFloat(lon);
        packet.payload.putFloat(alt);
        packet.payload.putFloat(std_dev_horz);
        packet.payload.putFloat(std_dev_vert);
        packet.payload.putFloat(vn);
        packet.payload.putFloat(ve);
        packet.payload.putFloat(vd);
        
        if (isMavlink2) {
             packet.payload.putInt(lat_int);
             packet.payload.putInt(lon_int);
            
        }
        return packet;
    }

    /**
     * Decode a sim_state message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.q1 = payload.getFloat();
        this.q2 = payload.getFloat();
        this.q3 = payload.getFloat();
        this.q4 = payload.getFloat();
        this.roll = payload.getFloat();
        this.pitch = payload.getFloat();
        this.yaw = payload.getFloat();
        this.xacc = payload.getFloat();
        this.yacc = payload.getFloat();
        this.zacc = payload.getFloat();
        this.xgyro = payload.getFloat();
        this.ygyro = payload.getFloat();
        this.zgyro = payload.getFloat();
        this.lat = payload.getFloat();
        this.lon = payload.getFloat();
        this.alt = payload.getFloat();
        this.std_dev_horz = payload.getFloat();
        this.std_dev_vert = payload.getFloat();
        this.vn = payload.getFloat();
        this.ve = payload.getFloat();
        this.vd = payload.getFloat();
        
        if (isMavlink2) {
             this.lat_int = payload.getInt();
             this.lon_int = payload.getInt();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_sim_state() {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_sim_state( float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd, int lat_int, int lon_int) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;

        this.q1 = q1;
        this.q2 = q2;
        this.q3 = q3;
        this.q4 = q4;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.xacc = xacc;
        this.yacc = yacc;
        this.zacc = zacc;
        this.xgyro = xgyro;
        this.ygyro = ygyro;
        this.zgyro = zgyro;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.std_dev_horz = std_dev_horz;
        this.std_dev_vert = std_dev_vert;
        this.vn = vn;
        this.ve = ve;
        this.vd = vd;
        this.lat_int = lat_int;
        this.lon_int = lon_int;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_sim_state( float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd, int lat_int, int lon_int, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.q1 = q1;
        this.q2 = q2;
        this.q3 = q3;
        this.q4 = q4;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.xacc = xacc;
        this.yacc = yacc;
        this.zacc = zacc;
        this.xgyro = xgyro;
        this.ygyro = ygyro;
        this.zgyro = zgyro;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.std_dev_horz = std_dev_horz;
        this.std_dev_vert = std_dev_vert;
        this.vn = vn;
        this.ve = ve;
        this.vd = vd;
        this.lat_int = lat_int;
        this.lon_int = lon_int;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_sim_state(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                                  
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SIM_STATE - sysid:"+sysid+" compid:"+compid+" q1:"+q1+" q2:"+q2+" q3:"+q3+" q4:"+q4+" roll:"+roll+" pitch:"+pitch+" yaw:"+yaw+" xacc:"+xacc+" yacc:"+yacc+" zacc:"+zacc+" xgyro:"+xgyro+" ygyro:"+ygyro+" zgyro:"+zgyro+" lat:"+lat+" lon:"+lon+" alt:"+alt+" std_dev_horz:"+std_dev_horz+" std_dev_vert:"+std_dev_vert+" vn:"+vn+" ve:"+ve+" vd:"+vd+" lat_int:"+lat_int+" lon_int:"+lon_int+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SIM_STATE";
    }
}
        