/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ESC_STATUS PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * ESC information for higher rate streaming. Recommended streaming rate is ~10 Hz. Information that changes more slowly is sent in ESC_INFO. It should typically only be streamed on high-bandwidth links (i.e. to a companion computer).
 */
public class msg_esc_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ESC_STATUS = 291;
    public static final int MAVLINK_MSG_LENGTH = 57;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ESC_STATUS;

    
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
     */
    @Description("Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.")
    @Units("us")
    public long time_usec;
    
    /**
     * Reported motor RPM from each ESC (negative for reverse rotation).
     */
    @Description("Reported motor RPM from each ESC (negative for reverse rotation).")
    @Units("rpm")
    public int rpm[] = new int[4];
    
    /**
     * Voltage measured from each ESC.
     */
    @Description("Voltage measured from each ESC.")
    @Units("V")
    public float voltage[] = new float[4];
    
    /**
     * Current measured from each ESC.
     */
    @Description("Current measured from each ESC.")
    @Units("A")
    public float current[] = new float[4];
    
    /**
     * Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.
     */
    @Description("Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.")
    @Units("")
    public short index;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_ESC_STATUS;

        packet.payload.putUnsignedLong(time_usec);
        
        for (int i = 0; i < rpm.length; i++) {
            packet.payload.putInt(rpm[i]);
        }
                    
        
        for (int i = 0; i < voltage.length; i++) {
            packet.payload.putFloat(voltage[i]);
        }
                    
        
        for (int i = 0; i < current.length; i++) {
            packet.payload.putFloat(current[i]);
        }
                    
        packet.payload.putUnsignedByte(index);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a esc_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_usec = payload.getUnsignedLong();
        
        for (int i = 0; i < this.rpm.length; i++) {
            this.rpm[i] = payload.getInt();
        }
                
        
        for (int i = 0; i < this.voltage.length; i++) {
            this.voltage[i] = payload.getFloat();
        }
                
        
        for (int i = 0; i < this.current.length; i++) {
            this.current[i] = payload.getFloat();
        }
                
        this.index = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_esc_status() {
        this.msgid = MAVLINK_MSG_ID_ESC_STATUS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_esc_status( long time_usec, int[] rpm, float[] voltage, float[] current, short index) {
        this.msgid = MAVLINK_MSG_ID_ESC_STATUS;

        this.time_usec = time_usec;
        this.rpm = rpm;
        this.voltage = voltage;
        this.current = current;
        this.index = index;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_esc_status( long time_usec, int[] rpm, float[] voltage, float[] current, short index, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ESC_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.rpm = rpm;
        this.voltage = voltage;
        this.current = current;
        this.index = index;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_esc_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ESC_STATUS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_ESC_STATUS - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" rpm:"+rpm+" voltage:"+voltage+" current:"+current+" index:"+index+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_ESC_STATUS";
    }
}
        