/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE STORAGE_INFORMATION PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Information about a storage medium. This message is sent in response to a request with MAV_CMD_REQUEST_MESSAGE and whenever the status of the storage changes (STORAGE_STATUS). Use MAV_CMD_REQUEST_MESSAGE.param2 to indicate the index/id of requested storage: 0 for all, 1 for first, 2 for second, etc.
 */
public class msg_storage_information extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_STORAGE_INFORMATION = 261;
    public static final int MAVLINK_MSG_LENGTH = 61;
    private static final long serialVersionUID = MAVLINK_MSG_ID_STORAGE_INFORMATION;

    
    /**
     * Timestamp (time since system boot).
     */
    @Description("Timestamp (time since system boot).")
    @Units("ms")
    public long time_boot_ms;
    
    /**
     * Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
     */
    @Description("Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.")
    @Units("MiB")
    public float total_capacity;
    
    /**
     * Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
     */
    @Description("Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.")
    @Units("MiB")
    public float used_capacity;
    
    /**
     * Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
     */
    @Description("Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.")
    @Units("MiB")
    public float available_capacity;
    
    /**
     * Read speed.
     */
    @Description("Read speed.")
    @Units("MiB/s")
    public float read_speed;
    
    /**
     * Write speed.
     */
    @Description("Write speed.")
    @Units("MiB/s")
    public float write_speed;
    
    /**
     * Storage ID (1 for first, 2 for second, etc.)
     */
    @Description("Storage ID (1 for first, 2 for second, etc.)")
    @Units("")
    public short storage_id;
    
    /**
     * Number of storage devices
     */
    @Description("Number of storage devices")
    @Units("")
    public short storage_count;
    
    /**
     * Status of storage
     */
    @Description("Status of storage")
    @Units("")
    public short status;
    
    /**
     * Type of storage
     */
    @Description("Type of storage")
    @Units("")
    public short type;
    
    /**
     * Textual storage name to be used in UI (microSD 1, Internal Memory, etc.) This is a NULL terminated string. If it is exactly 32 characters long, add a terminating NULL. If this string is empty, the generic type is shown to the user.
     */
    @Description("Textual storage name to be used in UI (microSD 1, Internal Memory, etc.) This is a NULL terminated string. If it is exactly 32 characters long, add a terminating NULL. If this string is empty, the generic type is shown to the user.")
    @Units("")
    public byte name[] = new byte[32];
    
    /**
     * Flags indicating whether this instance is preferred storage for photos, videos, etc.         Note: Implementations should initially set the flags on the system-default storage id used for saving media (if possible/supported).         This setting can then be overridden using MAV_CMD_SET_STORAGE_USAGE.         If the media usage flags are not set, a GCS may assume storage ID 1 is the default storage for all media types.
     */
    @Description("Flags indicating whether this instance is preferred storage for photos, videos, etc.         Note: Implementations should initially set the flags on the system-default storage id used for saving media (if possible/supported).         This setting can then be overridden using MAV_CMD_SET_STORAGE_USAGE.         If the media usage flags are not set, a GCS may assume storage ID 1 is the default storage for all media types.")
    @Units("")
    public short storage_usage;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;

        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(total_capacity);
        packet.payload.putFloat(used_capacity);
        packet.payload.putFloat(available_capacity);
        packet.payload.putFloat(read_speed);
        packet.payload.putFloat(write_speed);
        packet.payload.putUnsignedByte(storage_id);
        packet.payload.putUnsignedByte(storage_count);
        packet.payload.putUnsignedByte(status);
        
        if (isMavlink2) {
             packet.payload.putUnsignedByte(type);
             
        for (int i = 0; i < name.length; i++) {
            packet.payload.putByte(name[i]);
        }
                    
             packet.payload.putUnsignedByte(storage_usage);
            
        }
        return packet;
    }

    /**
     * Decode a storage_information message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_boot_ms = payload.getUnsignedInt();
        this.total_capacity = payload.getFloat();
        this.used_capacity = payload.getFloat();
        this.available_capacity = payload.getFloat();
        this.read_speed = payload.getFloat();
        this.write_speed = payload.getFloat();
        this.storage_id = payload.getUnsignedByte();
        this.storage_count = payload.getUnsignedByte();
        this.status = payload.getUnsignedByte();
        
        if (isMavlink2) {
             this.type = payload.getUnsignedByte();
             
        for (int i = 0; i < this.name.length; i++) {
            this.name[i] = payload.getByte();
        }
                
             this.storage_usage = payload.getUnsignedByte();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_storage_information() {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_storage_information( long time_boot_ms, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed, short storage_id, short storage_count, short status, short type, byte[] name, short storage_usage) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;

        this.time_boot_ms = time_boot_ms;
        this.total_capacity = total_capacity;
        this.used_capacity = used_capacity;
        this.available_capacity = available_capacity;
        this.read_speed = read_speed;
        this.write_speed = write_speed;
        this.storage_id = storage_id;
        this.storage_count = storage_count;
        this.status = status;
        this.type = type;
        this.name = name;
        this.storage_usage = storage_usage;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_storage_information( long time_boot_ms, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed, short storage_id, short storage_count, short status, short type, byte[] name, short storage_usage, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.total_capacity = total_capacity;
        this.used_capacity = used_capacity;
        this.available_capacity = available_capacity;
        this.read_speed = read_speed;
        this.write_speed = write_speed;
        this.storage_id = storage_id;
        this.storage_count = storage_count;
        this.status = status;
        this.type = type;
        this.name = name;
        this.storage_usage = storage_usage;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_storage_information(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                         
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setName(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            name[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getName() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 32; i++) {
            if (name[i] != 0)
                buf.append((char) name[i]);
            else
                break;
        }
        return buf.toString();

    }
                           
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_STORAGE_INFORMATION - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" total_capacity:"+total_capacity+" used_capacity:"+used_capacity+" available_capacity:"+available_capacity+" read_speed:"+read_speed+" write_speed:"+write_speed+" storage_id:"+storage_id+" storage_count:"+storage_count+" status:"+status+" type:"+type+" name:"+name+" storage_usage:"+storage_usage+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_STORAGE_INFORMATION";
    }
}
        