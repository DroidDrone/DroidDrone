/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE HIGH_LATENCY PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Message appropriate for high latency connections like Iridium
 */
public class msg_high_latency extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_HIGH_LATENCY = 234;
    public static final int MAVLINK_MSG_LENGTH = 40;
    private static final long serialVersionUID = MAVLINK_MSG_ID_HIGH_LATENCY;

    
    /**
     * A bitfield for use for autopilot-specific flags.
     */
    @Description("A bitfield for use for autopilot-specific flags.")
    @Units("")
    public long custom_mode;
    
    /**
     * Latitude
     */
    @Description("Latitude")
    @Units("degE7")
    public int latitude;
    
    /**
     * Longitude
     */
    @Description("Longitude")
    @Units("degE7")
    public int longitude;
    
    /**
     * roll
     */
    @Description("roll")
    @Units("cdeg")
    public short roll;
    
    /**
     * pitch
     */
    @Description("pitch")
    @Units("cdeg")
    public short pitch;
    
    /**
     * heading
     */
    @Description("heading")
    @Units("cdeg")
    public int heading;
    
    /**
     * heading setpoint
     */
    @Description("heading setpoint")
    @Units("cdeg")
    public short heading_sp;
    
    /**
     * Altitude above mean sea level
     */
    @Description("Altitude above mean sea level")
    @Units("m")
    public short altitude_amsl;
    
    /**
     * Altitude setpoint relative to the home position
     */
    @Description("Altitude setpoint relative to the home position")
    @Units("m")
    public short altitude_sp;
    
    /**
     * distance to target
     */
    @Description("distance to target")
    @Units("m")
    public int wp_distance;
    
    /**
     * Bitmap of enabled system modes.
     */
    @Description("Bitmap of enabled system modes.")
    @Units("")
    public short base_mode;
    
    /**
     * The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
     */
    @Description("The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.")
    @Units("")
    public short landed_state;
    
    /**
     * throttle (percentage)
     */
    @Description("throttle (percentage)")
    @Units("%")
    public byte throttle;
    
    /**
     * airspeed
     */
    @Description("airspeed")
    @Units("m/s")
    public short airspeed;
    
    /**
     * airspeed setpoint
     */
    @Description("airspeed setpoint")
    @Units("m/s")
    public short airspeed_sp;
    
    /**
     * groundspeed
     */
    @Description("groundspeed")
    @Units("m/s")
    public short groundspeed;
    
    /**
     * climb rate
     */
    @Description("climb rate")
    @Units("m/s")
    public byte climb_rate;
    
    /**
     * Number of satellites visible. If unknown, set to UINT8_MAX
     */
    @Description("Number of satellites visible. If unknown, set to UINT8_MAX")
    @Units("")
    public short gps_nsat;
    
    /**
     * GPS Fix type.
     */
    @Description("GPS Fix type.")
    @Units("")
    public short gps_fix_type;
    
    /**
     * Remaining battery (percentage)
     */
    @Description("Remaining battery (percentage)")
    @Units("%")
    public short battery_remaining;
    
    /**
     * Autopilot temperature (degrees C)
     */
    @Description("Autopilot temperature (degrees C)")
    @Units("degC")
    public byte temperature;
    
    /**
     * Air temperature (degrees C) from airspeed sensor
     */
    @Description("Air temperature (degrees C) from airspeed sensor")
    @Units("degC")
    public byte temperature_air;
    
    /**
     * failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
     */
    @Description("failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)")
    @Units("")
    public short failsafe;
    
    /**
     * current waypoint number
     */
    @Description("current waypoint number")
    @Units("")
    public short wp_num;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_HIGH_LATENCY;

        packet.payload.putUnsignedInt(custom_mode);
        packet.payload.putInt(latitude);
        packet.payload.putInt(longitude);
        packet.payload.putShort(roll);
        packet.payload.putShort(pitch);
        packet.payload.putUnsignedShort(heading);
        packet.payload.putShort(heading_sp);
        packet.payload.putShort(altitude_amsl);
        packet.payload.putShort(altitude_sp);
        packet.payload.putUnsignedShort(wp_distance);
        packet.payload.putUnsignedByte(base_mode);
        packet.payload.putUnsignedByte(landed_state);
        packet.payload.putByte(throttle);
        packet.payload.putUnsignedByte(airspeed);
        packet.payload.putUnsignedByte(airspeed_sp);
        packet.payload.putUnsignedByte(groundspeed);
        packet.payload.putByte(climb_rate);
        packet.payload.putUnsignedByte(gps_nsat);
        packet.payload.putUnsignedByte(gps_fix_type);
        packet.payload.putUnsignedByte(battery_remaining);
        packet.payload.putByte(temperature);
        packet.payload.putByte(temperature_air);
        packet.payload.putUnsignedByte(failsafe);
        packet.payload.putUnsignedByte(wp_num);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a high_latency message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.custom_mode = payload.getUnsignedInt();
        this.latitude = payload.getInt();
        this.longitude = payload.getInt();
        this.roll = payload.getShort();
        this.pitch = payload.getShort();
        this.heading = payload.getUnsignedShort();
        this.heading_sp = payload.getShort();
        this.altitude_amsl = payload.getShort();
        this.altitude_sp = payload.getShort();
        this.wp_distance = payload.getUnsignedShort();
        this.base_mode = payload.getUnsignedByte();
        this.landed_state = payload.getUnsignedByte();
        this.throttle = payload.getByte();
        this.airspeed = payload.getUnsignedByte();
        this.airspeed_sp = payload.getUnsignedByte();
        this.groundspeed = payload.getUnsignedByte();
        this.climb_rate = payload.getByte();
        this.gps_nsat = payload.getUnsignedByte();
        this.gps_fix_type = payload.getUnsignedByte();
        this.battery_remaining = payload.getUnsignedByte();
        this.temperature = payload.getByte();
        this.temperature_air = payload.getByte();
        this.failsafe = payload.getUnsignedByte();
        this.wp_num = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_high_latency() {
        this.msgid = MAVLINK_MSG_ID_HIGH_LATENCY;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_high_latency( long custom_mode, int latitude, int longitude, short roll, short pitch, int heading, short heading_sp, short altitude_amsl, short altitude_sp, int wp_distance, short base_mode, short landed_state, byte throttle, short airspeed, short airspeed_sp, short groundspeed, byte climb_rate, short gps_nsat, short gps_fix_type, short battery_remaining, byte temperature, byte temperature_air, short failsafe, short wp_num) {
        this.msgid = MAVLINK_MSG_ID_HIGH_LATENCY;

        this.custom_mode = custom_mode;
        this.latitude = latitude;
        this.longitude = longitude;
        this.roll = roll;
        this.pitch = pitch;
        this.heading = heading;
        this.heading_sp = heading_sp;
        this.altitude_amsl = altitude_amsl;
        this.altitude_sp = altitude_sp;
        this.wp_distance = wp_distance;
        this.base_mode = base_mode;
        this.landed_state = landed_state;
        this.throttle = throttle;
        this.airspeed = airspeed;
        this.airspeed_sp = airspeed_sp;
        this.groundspeed = groundspeed;
        this.climb_rate = climb_rate;
        this.gps_nsat = gps_nsat;
        this.gps_fix_type = gps_fix_type;
        this.battery_remaining = battery_remaining;
        this.temperature = temperature;
        this.temperature_air = temperature_air;
        this.failsafe = failsafe;
        this.wp_num = wp_num;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_high_latency( long custom_mode, int latitude, int longitude, short roll, short pitch, int heading, short heading_sp, short altitude_amsl, short altitude_sp, int wp_distance, short base_mode, short landed_state, byte throttle, short airspeed, short airspeed_sp, short groundspeed, byte climb_rate, short gps_nsat, short gps_fix_type, short battery_remaining, byte temperature, byte temperature_air, short failsafe, short wp_num, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_HIGH_LATENCY;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.custom_mode = custom_mode;
        this.latitude = latitude;
        this.longitude = longitude;
        this.roll = roll;
        this.pitch = pitch;
        this.heading = heading;
        this.heading_sp = heading_sp;
        this.altitude_amsl = altitude_amsl;
        this.altitude_sp = altitude_sp;
        this.wp_distance = wp_distance;
        this.base_mode = base_mode;
        this.landed_state = landed_state;
        this.throttle = throttle;
        this.airspeed = airspeed;
        this.airspeed_sp = airspeed_sp;
        this.groundspeed = groundspeed;
        this.climb_rate = climb_rate;
        this.gps_nsat = gps_nsat;
        this.gps_fix_type = gps_fix_type;
        this.battery_remaining = battery_remaining;
        this.temperature = temperature;
        this.temperature_air = temperature_air;
        this.failsafe = failsafe;
        this.wp_num = wp_num;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_high_latency(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_HIGH_LATENCY;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                                    
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_HIGH_LATENCY - sysid:"+sysid+" compid:"+compid+" custom_mode:"+custom_mode+" latitude:"+latitude+" longitude:"+longitude+" roll:"+roll+" pitch:"+pitch+" heading:"+heading+" heading_sp:"+heading_sp+" altitude_amsl:"+altitude_amsl+" altitude_sp:"+altitude_sp+" wp_distance:"+wp_distance+" base_mode:"+base_mode+" landed_state:"+landed_state+" throttle:"+throttle+" airspeed:"+airspeed+" airspeed_sp:"+airspeed_sp+" groundspeed:"+groundspeed+" climb_rate:"+climb_rate+" gps_nsat:"+gps_nsat+" gps_fix_type:"+gps_fix_type+" battery_remaining:"+battery_remaining+" temperature:"+temperature+" temperature_air:"+temperature_air+" failsafe:"+failsafe+" wp_num:"+wp_num+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_HIGH_LATENCY";
    }
}
        