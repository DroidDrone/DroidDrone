/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DISTANCE_SENSOR PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Distance sensor information for an onboard rangefinder.
 */
public class msg_distance_sensor extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DISTANCE_SENSOR = 132;
    public static final int MAVLINK_MSG_LENGTH = 39;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DISTANCE_SENSOR;

    
    /**
     * Timestamp (time since system boot).
     */
    @Description("Timestamp (time since system boot).")
    @Units("ms")
    public long time_boot_ms;
    
    /**
     * Minimum distance the sensor can measure
     */
    @Description("Minimum distance the sensor can measure")
    @Units("cm")
    public int min_distance;
    
    /**
     * Maximum distance the sensor can measure
     */
    @Description("Maximum distance the sensor can measure")
    @Units("cm")
    public int max_distance;
    
    /**
     * Current distance reading
     */
    @Description("Current distance reading")
    @Units("cm")
    public int current_distance;
    
    /**
     * Type of distance sensor.
     */
    @Description("Type of distance sensor.")
    @Units("")
    public short type;
    
    /**
     * Onboard ID of the sensor
     */
    @Description("Onboard ID of the sensor")
    @Units("")
    public short id;
    
    /**
     * Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270
     */
    @Description("Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270")
    @Units("")
    public short orientation;
    
    /**
     * Measurement variance. Max standard deviation is 6cm. UINT8_MAX if unknown.
     */
    @Description("Measurement variance. Max standard deviation is 6cm. UINT8_MAX if unknown.")
    @Units("cm^2")
    public short covariance;
    
    /**
     * Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
     */
    @Description("Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.")
    @Units("rad")
    public float horizontal_fov;
    
    /**
     * Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
     */
    @Description("Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.")
    @Units("rad")
    public float vertical_fov;
    
    /**
     * Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid.'
     */
    @Description("Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid.'")
    @Units("")
    public float quaternion[] = new float[4];
    
    /**
     * Signal quality of the sensor. Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal.
     */
    @Description("Signal quality of the sensor. Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal.")
    @Units("%")
    public short signal_quality;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_DISTANCE_SENSOR;

        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putUnsignedShort(min_distance);
        packet.payload.putUnsignedShort(max_distance);
        packet.payload.putUnsignedShort(current_distance);
        packet.payload.putUnsignedByte(type);
        packet.payload.putUnsignedByte(id);
        packet.payload.putUnsignedByte(orientation);
        packet.payload.putUnsignedByte(covariance);
        
        if (isMavlink2) {
             packet.payload.putFloat(horizontal_fov);
             packet.payload.putFloat(vertical_fov);
             
        for (int i = 0; i < quaternion.length; i++) {
            packet.payload.putFloat(quaternion[i]);
        }
                    
             packet.payload.putUnsignedByte(signal_quality);
            
        }
        return packet;
    }

    /**
     * Decode a distance_sensor message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_boot_ms = payload.getUnsignedInt();
        this.min_distance = payload.getUnsignedShort();
        this.max_distance = payload.getUnsignedShort();
        this.current_distance = payload.getUnsignedShort();
        this.type = payload.getUnsignedByte();
        this.id = payload.getUnsignedByte();
        this.orientation = payload.getUnsignedByte();
        this.covariance = payload.getUnsignedByte();
        
        if (isMavlink2) {
             this.horizontal_fov = payload.getFloat();
             this.vertical_fov = payload.getFloat();
             
        for (int i = 0; i < this.quaternion.length; i++) {
            this.quaternion[i] = payload.getFloat();
        }
                
             this.signal_quality = payload.getUnsignedByte();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_distance_sensor() {
        this.msgid = MAVLINK_MSG_ID_DISTANCE_SENSOR;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_distance_sensor( long time_boot_ms, int min_distance, int max_distance, int current_distance, short type, short id, short orientation, short covariance, float horizontal_fov, float vertical_fov, float[] quaternion, short signal_quality) {
        this.msgid = MAVLINK_MSG_ID_DISTANCE_SENSOR;

        this.time_boot_ms = time_boot_ms;
        this.min_distance = min_distance;
        this.max_distance = max_distance;
        this.current_distance = current_distance;
        this.type = type;
        this.id = id;
        this.orientation = orientation;
        this.covariance = covariance;
        this.horizontal_fov = horizontal_fov;
        this.vertical_fov = vertical_fov;
        this.quaternion = quaternion;
        this.signal_quality = signal_quality;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_distance_sensor( long time_boot_ms, int min_distance, int max_distance, int current_distance, short type, short id, short orientation, short covariance, float horizontal_fov, float vertical_fov, float[] quaternion, short signal_quality, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_DISTANCE_SENSOR;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.min_distance = min_distance;
        this.max_distance = max_distance;
        this.current_distance = current_distance;
        this.type = type;
        this.id = id;
        this.orientation = orientation;
        this.covariance = covariance;
        this.horizontal_fov = horizontal_fov;
        this.vertical_fov = vertical_fov;
        this.quaternion = quaternion;
        this.signal_quality = signal_quality;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_distance_sensor(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_DISTANCE_SENSOR;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                            
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_DISTANCE_SENSOR - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" min_distance:"+min_distance+" max_distance:"+max_distance+" current_distance:"+current_distance+" type:"+type+" id:"+id+" orientation:"+orientation+" covariance:"+covariance+" horizontal_fov:"+horizontal_fov+" vertical_fov:"+vertical_fov+" quaternion:"+quaternion+" signal_quality:"+signal_quality+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_DISTANCE_SENSOR";
    }
}
        