/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ILLUMINATOR_STATUS PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Illuminator status
 */
public class msg_illuminator_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ILLUMINATOR_STATUS = 440;
    public static final int MAVLINK_MSG_LENGTH = 35;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ILLUMINATOR_STATUS;

    
    /**
     * Time since the start-up of the illuminator in ms
     */
    @Description("Time since the start-up of the illuminator in ms")
    @Units("ms")
    public long uptime_ms;
    
    /**
     * Errors
     */
    @Description("Errors")
    @Units("")
    public long error_status;
    
    /**
     * Illuminator brightness
     */
    @Description("Illuminator brightness")
    @Units("%")
    public float brightness;
    
    /**
     * Illuminator strobing period in seconds
     */
    @Description("Illuminator strobing period in seconds")
    @Units("s")
    public float strobe_period;
    
    /**
     * Illuminator strobing duty cycle
     */
    @Description("Illuminator strobing duty cycle")
    @Units("%")
    public float strobe_duty_cycle;
    
    /**
     * Temperature in Celsius
     */
    @Description("Temperature in Celsius")
    @Units("")
    public float temp_c;
    
    /**
     * Minimum strobing period in seconds
     */
    @Description("Minimum strobing period in seconds")
    @Units("s")
    public float min_strobe_period;
    
    /**
     * Maximum strobing period in seconds
     */
    @Description("Maximum strobing period in seconds")
    @Units("s")
    public float max_strobe_period;
    
    /**
     * 0: Illuminators OFF, 1: Illuminators ON
     */
    @Description("0: Illuminators OFF, 1: Illuminators ON")
    @Units("")
    public short enable;
    
    /**
     * Supported illuminator modes
     */
    @Description("Supported illuminator modes")
    @Units("")
    public short mode_bitmask;
    
    /**
     * Illuminator mode
     */
    @Description("Illuminator mode")
    @Units("")
    public short mode;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_ILLUMINATOR_STATUS;

        packet.payload.putUnsignedInt(uptime_ms);
        packet.payload.putUnsignedInt(error_status);
        packet.payload.putFloat(brightness);
        packet.payload.putFloat(strobe_period);
        packet.payload.putFloat(strobe_duty_cycle);
        packet.payload.putFloat(temp_c);
        packet.payload.putFloat(min_strobe_period);
        packet.payload.putFloat(max_strobe_period);
        packet.payload.putUnsignedByte(enable);
        packet.payload.putUnsignedByte(mode_bitmask);
        packet.payload.putUnsignedByte(mode);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a illuminator_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.uptime_ms = payload.getUnsignedInt();
        this.error_status = payload.getUnsignedInt();
        this.brightness = payload.getFloat();
        this.strobe_period = payload.getFloat();
        this.strobe_duty_cycle = payload.getFloat();
        this.temp_c = payload.getFloat();
        this.min_strobe_period = payload.getFloat();
        this.max_strobe_period = payload.getFloat();
        this.enable = payload.getUnsignedByte();
        this.mode_bitmask = payload.getUnsignedByte();
        this.mode = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_illuminator_status() {
        this.msgid = MAVLINK_MSG_ID_ILLUMINATOR_STATUS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_illuminator_status( long uptime_ms, long error_status, float brightness, float strobe_period, float strobe_duty_cycle, float temp_c, float min_strobe_period, float max_strobe_period, short enable, short mode_bitmask, short mode) {
        this.msgid = MAVLINK_MSG_ID_ILLUMINATOR_STATUS;

        this.uptime_ms = uptime_ms;
        this.error_status = error_status;
        this.brightness = brightness;
        this.strobe_period = strobe_period;
        this.strobe_duty_cycle = strobe_duty_cycle;
        this.temp_c = temp_c;
        this.min_strobe_period = min_strobe_period;
        this.max_strobe_period = max_strobe_period;
        this.enable = enable;
        this.mode_bitmask = mode_bitmask;
        this.mode = mode;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_illuminator_status( long uptime_ms, long error_status, float brightness, float strobe_period, float strobe_duty_cycle, float temp_c, float min_strobe_period, float max_strobe_period, short enable, short mode_bitmask, short mode, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ILLUMINATOR_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.uptime_ms = uptime_ms;
        this.error_status = error_status;
        this.brightness = brightness;
        this.strobe_period = strobe_period;
        this.strobe_duty_cycle = strobe_duty_cycle;
        this.temp_c = temp_c;
        this.min_strobe_period = min_strobe_period;
        this.max_strobe_period = max_strobe_period;
        this.enable = enable;
        this.mode_bitmask = mode_bitmask;
        this.mode = mode;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_illuminator_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ILLUMINATOR_STATUS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_ILLUMINATOR_STATUS - sysid:"+sysid+" compid:"+compid+" uptime_ms:"+uptime_ms+" error_status:"+error_status+" brightness:"+brightness+" strobe_period:"+strobe_period+" strobe_duty_cycle:"+strobe_duty_cycle+" temp_c:"+temp_c+" min_strobe_period:"+min_strobe_period+" max_strobe_period:"+max_strobe_period+" enable:"+enable+" mode_bitmask:"+mode_bitmask+" mode:"+mode+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_ILLUMINATOR_STATUS";
    }
}
        