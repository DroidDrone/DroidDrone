/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EVENT PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Event message. Each new event from a particular component gets a new sequence number. The same message might be sent multiple times if (re-)requested. Most events are broadcast, some can be specific to a target component (as receivers keep track of the sequence for missed events, all events need to be broadcast. Thus we use destination_component instead of target_component).
 */
public class msg_event extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_EVENT = 410;
    public static final int MAVLINK_MSG_LENGTH = 53;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EVENT;

    
    /**
     * Event ID (as defined in the component metadata)
     */
    @Description("Event ID (as defined in the component metadata)")
    @Units("")
    public long id;
    
    /**
     * Timestamp (time since system boot when the event happened).
     */
    @Description("Timestamp (time since system boot when the event happened).")
    @Units("ms")
    public long event_time_boot_ms;
    
    /**
     * Sequence number.
     */
    @Description("Sequence number.")
    @Units("")
    public int sequence;
    
    /**
     * Component ID
     */
    @Description("Component ID")
    @Units("")
    public short destination_component;
    
    /**
     * System ID
     */
    @Description("System ID")
    @Units("")
    public short destination_system;
    
    /**
     * Log levels: 4 bits MSB: internal (for logging purposes), 4 bits LSB: external. Levels: Emergency = 0, Alert = 1, Critical = 2, Error = 3, Warning = 4, Notice = 5, Info = 6, Debug = 7, Protocol = 8, Disabled = 9
     */
    @Description("Log levels: 4 bits MSB: internal (for logging purposes), 4 bits LSB: external. Levels: Emergency = 0, Alert = 1, Critical = 2, Error = 3, Warning = 4, Notice = 5, Info = 6, Debug = 7, Protocol = 8, Disabled = 9")
    @Units("")
    public short log_levels;
    
    /**
     * Arguments (depend on event ID).
     */
    @Description("Arguments (depend on event ID).")
    @Units("")
    public short arguments[] = new short[40];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_EVENT;

        packet.payload.putUnsignedInt(id);
        packet.payload.putUnsignedInt(event_time_boot_ms);
        packet.payload.putUnsignedShort(sequence);
        packet.payload.putUnsignedByte(destination_component);
        packet.payload.putUnsignedByte(destination_system);
        packet.payload.putUnsignedByte(log_levels);
        
        for (int i = 0; i < arguments.length; i++) {
            packet.payload.putUnsignedByte(arguments[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a event message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.id = payload.getUnsignedInt();
        this.event_time_boot_ms = payload.getUnsignedInt();
        this.sequence = payload.getUnsignedShort();
        this.destination_component = payload.getUnsignedByte();
        this.destination_system = payload.getUnsignedByte();
        this.log_levels = payload.getUnsignedByte();
        
        for (int i = 0; i < this.arguments.length; i++) {
            this.arguments[i] = payload.getUnsignedByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_event() {
        this.msgid = MAVLINK_MSG_ID_EVENT;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_event( long id, long event_time_boot_ms, int sequence, short destination_component, short destination_system, short log_levels, short[] arguments) {
        this.msgid = MAVLINK_MSG_ID_EVENT;

        this.id = id;
        this.event_time_boot_ms = event_time_boot_ms;
        this.sequence = sequence;
        this.destination_component = destination_component;
        this.destination_system = destination_system;
        this.log_levels = log_levels;
        this.arguments = arguments;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_event( long id, long event_time_boot_ms, int sequence, short destination_component, short destination_system, short log_levels, short[] arguments, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_EVENT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.id = id;
        this.event_time_boot_ms = event_time_boot_ms;
        this.sequence = sequence;
        this.destination_component = destination_component;
        this.destination_system = destination_system;
        this.log_levels = log_levels;
        this.arguments = arguments;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_event(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_EVENT;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                  
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_EVENT - sysid:"+sysid+" compid:"+compid+" id:"+id+" event_time_boot_ms:"+event_time_boot_ms+" sequence:"+sequence+" destination_component:"+destination_component+" destination_system:"+destination_system+" log_levels:"+log_levels+" arguments:"+arguments+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_EVENT";
    }
}
        