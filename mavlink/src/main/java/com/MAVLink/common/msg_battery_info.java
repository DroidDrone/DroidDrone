/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE BATTERY_INFO PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * 
        Battery information that is static, or requires infrequent update.
        This message should requested using MAV_CMD_REQUEST_MESSAGE and/or streamed at very low rate.
        BATTERY_STATUS_V2 is used for higher-rate battery status information.
      
 */
public class msg_battery_info extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_BATTERY_INFO = 370;
    public static final int MAVLINK_MSG_LENGTH = 140;
    private static final long serialVersionUID = MAVLINK_MSG_ID_BATTERY_INFO;

    
    /**
     * Minimum per-cell voltage when discharging. 0: field not provided.
     */
    @Description("Minimum per-cell voltage when discharging. 0: field not provided.")
    @Units("V")
    public float discharge_minimum_voltage;
    
    /**
     * Minimum per-cell voltage when charging. 0: field not provided.
     */
    @Description("Minimum per-cell voltage when charging. 0: field not provided.")
    @Units("V")
    public float charging_minimum_voltage;
    
    /**
     * Minimum per-cell voltage when resting. 0: field not provided.
     */
    @Description("Minimum per-cell voltage when resting. 0: field not provided.")
    @Units("V")
    public float resting_minimum_voltage;
    
    /**
     * Maximum per-cell voltage when charged. 0: field not provided.
     */
    @Description("Maximum per-cell voltage when charged. 0: field not provided.")
    @Units("V")
    public float charging_maximum_voltage;
    
    /**
     * Maximum pack continuous charge current. 0: field not provided.
     */
    @Description("Maximum pack continuous charge current. 0: field not provided.")
    @Units("A")
    public float charging_maximum_current;
    
    /**
     * Battery nominal voltage. Used for conversion between Wh and Ah. 0: field not provided.
     */
    @Description("Battery nominal voltage. Used for conversion between Wh and Ah. 0: field not provided.")
    @Units("V")
    public float nominal_voltage;
    
    /**
     * Maximum pack discharge current. 0: field not provided.
     */
    @Description("Maximum pack discharge current. 0: field not provided.")
    @Units("A")
    public float discharge_maximum_current;
    
    /**
     * Maximum pack discharge burst current. 0: field not provided.
     */
    @Description("Maximum pack discharge burst current. 0: field not provided.")
    @Units("A")
    public float discharge_maximum_burst_current;
    
    /**
     * Fully charged design capacity. 0: field not provided.
     */
    @Description("Fully charged design capacity. 0: field not provided.")
    @Units("Ah")
    public float design_capacity;
    
    /**
     * Predicted battery capacity when fully charged (accounting for battery degradation). NAN: field not provided.
     */
    @Description("Predicted battery capacity when fully charged (accounting for battery degradation). NAN: field not provided.")
    @Units("Ah")
    public float full_charge_capacity;
    
    /**
     * Lifetime count of the number of charge/discharge cycles (https://en.wikipedia.org/wiki/Charge_cycle). UINT16_MAX: field not provided.
     */
    @Description("Lifetime count of the number of charge/discharge cycles (https://en.wikipedia.org/wiki/Charge_cycle). UINT16_MAX: field not provided.")
    @Units("")
    public int cycle_count;
    
    /**
     * Battery weight. 0: field not provided.
     */
    @Description("Battery weight. 0: field not provided.")
    @Units("g")
    public int weight;
    
    /**
     * Battery ID
     */
    @Description("Battery ID")
    @Units("")
    public short id;
    
    /**
     * Function of the battery.
     */
    @Description("Function of the battery.")
    @Units("")
    public short battery_function;
    
    /**
     * Type (chemistry) of the battery.
     */
    @Description("Type (chemistry) of the battery.")
    @Units("")
    public short type;
    
    /**
     * State of Health (SOH) estimate. Typically 100% at the time of manufacture and will decrease over time and use. -1: field not provided.
     */
    @Description("State of Health (SOH) estimate. Typically 100% at the time of manufacture and will decrease over time and use. -1: field not provided.")
    @Units("%")
    public short state_of_health;
    
    /**
     * Number of battery cells in series. 0: field not provided.
     */
    @Description("Number of battery cells in series. 0: field not provided.")
    @Units("")
    public short cells_in_series;
    
    /**
     * Manufacture date (DDMMYYYY) in ASCII characters, 0 terminated. All 0: field not provided.
     */
    @Description("Manufacture date (DDMMYYYY) in ASCII characters, 0 terminated. All 0: field not provided.")
    @Units("")
    public byte manufacture_date[] = new byte[9];
    
    /**
     * Serial number in ASCII characters, 0 terminated. All 0: field not provided.
     */
    @Description("Serial number in ASCII characters, 0 terminated. All 0: field not provided.")
    @Units("")
    public byte serial_number[] = new byte[32];
    
    /**
     * Battery device name. Formatted as manufacturer name then product name, separated with an underscore (in ASCII characters), 0 terminated. All 0: field not provided.
     */
    @Description("Battery device name. Formatted as manufacturer name then product name, separated with an underscore (in ASCII characters), 0 terminated. All 0: field not provided.")
    @Units("")
    public byte name[] = new byte[50];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_BATTERY_INFO;

        packet.payload.putFloat(discharge_minimum_voltage);
        packet.payload.putFloat(charging_minimum_voltage);
        packet.payload.putFloat(resting_minimum_voltage);
        packet.payload.putFloat(charging_maximum_voltage);
        packet.payload.putFloat(charging_maximum_current);
        packet.payload.putFloat(nominal_voltage);
        packet.payload.putFloat(discharge_maximum_current);
        packet.payload.putFloat(discharge_maximum_burst_current);
        packet.payload.putFloat(design_capacity);
        packet.payload.putFloat(full_charge_capacity);
        packet.payload.putUnsignedShort(cycle_count);
        packet.payload.putUnsignedShort(weight);
        packet.payload.putUnsignedByte(id);
        packet.payload.putUnsignedByte(battery_function);
        packet.payload.putUnsignedByte(type);
        packet.payload.putUnsignedByte(state_of_health);
        packet.payload.putUnsignedByte(cells_in_series);
        
        for (int i = 0; i < manufacture_date.length; i++) {
            packet.payload.putByte(manufacture_date[i]);
        }
                    
        
        for (int i = 0; i < serial_number.length; i++) {
            packet.payload.putByte(serial_number[i]);
        }
                    
        
        for (int i = 0; i < name.length; i++) {
            packet.payload.putByte(name[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a battery_info message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.discharge_minimum_voltage = payload.getFloat();
        this.charging_minimum_voltage = payload.getFloat();
        this.resting_minimum_voltage = payload.getFloat();
        this.charging_maximum_voltage = payload.getFloat();
        this.charging_maximum_current = payload.getFloat();
        this.nominal_voltage = payload.getFloat();
        this.discharge_maximum_current = payload.getFloat();
        this.discharge_maximum_burst_current = payload.getFloat();
        this.design_capacity = payload.getFloat();
        this.full_charge_capacity = payload.getFloat();
        this.cycle_count = payload.getUnsignedShort();
        this.weight = payload.getUnsignedShort();
        this.id = payload.getUnsignedByte();
        this.battery_function = payload.getUnsignedByte();
        this.type = payload.getUnsignedByte();
        this.state_of_health = payload.getUnsignedByte();
        this.cells_in_series = payload.getUnsignedByte();
        
        for (int i = 0; i < this.manufacture_date.length; i++) {
            this.manufacture_date[i] = payload.getByte();
        }
                
        
        for (int i = 0; i < this.serial_number.length; i++) {
            this.serial_number[i] = payload.getByte();
        }
                
        
        for (int i = 0; i < this.name.length; i++) {
            this.name[i] = payload.getByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_battery_info() {
        this.msgid = MAVLINK_MSG_ID_BATTERY_INFO;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_battery_info( float discharge_minimum_voltage, float charging_minimum_voltage, float resting_minimum_voltage, float charging_maximum_voltage, float charging_maximum_current, float nominal_voltage, float discharge_maximum_current, float discharge_maximum_burst_current, float design_capacity, float full_charge_capacity, int cycle_count, int weight, short id, short battery_function, short type, short state_of_health, short cells_in_series, byte[] manufacture_date, byte[] serial_number, byte[] name) {
        this.msgid = MAVLINK_MSG_ID_BATTERY_INFO;

        this.discharge_minimum_voltage = discharge_minimum_voltage;
        this.charging_minimum_voltage = charging_minimum_voltage;
        this.resting_minimum_voltage = resting_minimum_voltage;
        this.charging_maximum_voltage = charging_maximum_voltage;
        this.charging_maximum_current = charging_maximum_current;
        this.nominal_voltage = nominal_voltage;
        this.discharge_maximum_current = discharge_maximum_current;
        this.discharge_maximum_burst_current = discharge_maximum_burst_current;
        this.design_capacity = design_capacity;
        this.full_charge_capacity = full_charge_capacity;
        this.cycle_count = cycle_count;
        this.weight = weight;
        this.id = id;
        this.battery_function = battery_function;
        this.type = type;
        this.state_of_health = state_of_health;
        this.cells_in_series = cells_in_series;
        this.manufacture_date = manufacture_date;
        this.serial_number = serial_number;
        this.name = name;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_battery_info( float discharge_minimum_voltage, float charging_minimum_voltage, float resting_minimum_voltage, float charging_maximum_voltage, float charging_maximum_current, float nominal_voltage, float discharge_maximum_current, float discharge_maximum_burst_current, float design_capacity, float full_charge_capacity, int cycle_count, int weight, short id, short battery_function, short type, short state_of_health, short cells_in_series, byte[] manufacture_date, byte[] serial_number, byte[] name, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_BATTERY_INFO;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.discharge_minimum_voltage = discharge_minimum_voltage;
        this.charging_minimum_voltage = charging_minimum_voltage;
        this.resting_minimum_voltage = resting_minimum_voltage;
        this.charging_maximum_voltage = charging_maximum_voltage;
        this.charging_maximum_current = charging_maximum_current;
        this.nominal_voltage = nominal_voltage;
        this.discharge_maximum_current = discharge_maximum_current;
        this.discharge_maximum_burst_current = discharge_maximum_burst_current;
        this.design_capacity = design_capacity;
        this.full_charge_capacity = full_charge_capacity;
        this.cycle_count = cycle_count;
        this.weight = weight;
        this.id = id;
        this.battery_function = battery_function;
        this.type = type;
        this.state_of_health = state_of_health;
        this.cells_in_series = cells_in_series;
        this.manufacture_date = manufacture_date;
        this.serial_number = serial_number;
        this.name = name;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_battery_info(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_BATTERY_INFO;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                       
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setManufacture_Date(String str) {
        int len = Math.min(str.length(), 9);
        for (int i=0; i<len; i++) {
            manufacture_date[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<9; i++) {            // padding for the rest of the buffer
            manufacture_date[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getManufacture_Date() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 9; i++) {
            if (manufacture_date[i] != 0)
                buf.append((char) manufacture_date[i]);
            else
                break;
        }
        return buf.toString();

    }
                          
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setSerial_Number(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            serial_number[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            serial_number[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getSerial_Number() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 32; i++) {
            if (serial_number[i] != 0)
                buf.append((char) serial_number[i]);
            else
                break;
        }
        return buf.toString();

    }
                          
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setName(String str) {
        int len = Math.min(str.length(), 50);
        for (int i=0; i<len; i++) {
            name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<50; i++) {            // padding for the rest of the buffer
            name[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getName() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++) {
            if (name[i] != 0)
                buf.append((char) name[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_BATTERY_INFO - sysid:"+sysid+" compid:"+compid+" discharge_minimum_voltage:"+discharge_minimum_voltage+" charging_minimum_voltage:"+charging_minimum_voltage+" resting_minimum_voltage:"+resting_minimum_voltage+" charging_maximum_voltage:"+charging_maximum_voltage+" charging_maximum_current:"+charging_maximum_current+" nominal_voltage:"+nominal_voltage+" discharge_maximum_current:"+discharge_maximum_current+" discharge_maximum_burst_current:"+discharge_maximum_burst_current+" design_capacity:"+design_capacity+" full_charge_capacity:"+full_charge_capacity+" cycle_count:"+cycle_count+" weight:"+weight+" id:"+id+" battery_function:"+battery_function+" type:"+type+" state_of_health:"+state_of_health+" cells_in_series:"+cells_in_series+" manufacture_date:"+manufacture_date+" serial_number:"+serial_number+" name:"+name+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_BATTERY_INFO";
    }
}
        